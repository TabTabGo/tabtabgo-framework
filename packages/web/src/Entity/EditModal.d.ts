export const EditEntityModalContext: React.Context<any>;
declare var _default: React.ComponentType<Pick<Pick<PropTypes.InferProps<{
    classes: PropTypes.Requireable<object>;
    children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    mode: PropTypes.Requireable<string>;
    open: PropTypes.Requireable<boolean>;
    title: PropTypes.Requireable<string>;
    entity: PropTypes.Validator<object>;
    namePlural: PropTypes.Validator<string>;
    nameSingular: PropTypes.Validator<string>;
    displayField: PropTypes.Validator<string | ((...args: any[]) => any)>;
    keyField: PropTypes.Validator<string>;
    originalEntity: PropTypes.Requireable<object>;
    defaultEntity: PropTypes.Requireable<object>;
    namePluralText: PropTypes.Requireable<string>;
    nameSingularText: PropTypes.Requireable<string>;
    actions: PropTypes.Requireable<object>;
    flags: PropTypes.Requireable<object>;
    header: PropTypes.Requireable<(...args: any[]) => any>;
    footer: PropTypes.Requireable<(...args: any[]) => any>;
    onValidate: PropTypes.Requireable<(...args: any[]) => any>;
    onSubmit: PropTypes.Requireable<(...args: any[]) => any>;
    onClose: PropTypes.Requireable<(...args: any[]) => any>;
    buttons: PropTypes.Requireable<object>;
    maxWidth: PropTypes.Requireable<string>;
    fullWidth: PropTypes.Requireable<boolean>;
    fullScreen: PropTypes.Requireable<boolean>;
    reloadEntity: PropTypes.Requireable<boolean>;
    service: PropTypes.Requireable<object>;
    saveProps: PropTypes.Requireable<object>;
    useSaveChanges: PropTypes.Requireable<boolean>;
    expandProperties: PropTypes.Requireable<string>;
}>, "open" | "footer" | "header" | "title" | "children" | "classes" | "onSubmit" | "onClose" | "actions" | "mode" | "buttons" | "nameSingularText" | "namePluralText" | "keyField" | "namePlural" | "nameSingular" | "displayField" | "flags" | "defaultEntity" | "fullScreen" | "onValidate" | "entity" | "expandProperties" | "reloadEntity" | "service" | "originalEntity" | "saveProps" | "useSaveChanges"> & Partial<Pick<PropTypes.InferProps<{
    classes: PropTypes.Requireable<object>;
    children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    mode: PropTypes.Requireable<string>;
    open: PropTypes.Requireable<boolean>;
    title: PropTypes.Requireable<string>;
    entity: PropTypes.Validator<object>;
    namePlural: PropTypes.Validator<string>;
    nameSingular: PropTypes.Validator<string>;
    displayField: PropTypes.Validator<string | ((...args: any[]) => any)>;
    keyField: PropTypes.Validator<string>;
    originalEntity: PropTypes.Requireable<object>;
    defaultEntity: PropTypes.Requireable<object>;
    namePluralText: PropTypes.Requireable<string>;
    nameSingularText: PropTypes.Requireable<string>;
    actions: PropTypes.Requireable<object>;
    flags: PropTypes.Requireable<object>;
    header: PropTypes.Requireable<(...args: any[]) => any>;
    footer: PropTypes.Requireable<(...args: any[]) => any>;
    onValidate: PropTypes.Requireable<(...args: any[]) => any>;
    onSubmit: PropTypes.Requireable<(...args: any[]) => any>;
    onClose: PropTypes.Requireable<(...args: any[]) => any>;
    buttons: PropTypes.Requireable<object>;
    maxWidth: PropTypes.Requireable<string>;
    fullWidth: PropTypes.Requireable<boolean>;
    fullScreen: PropTypes.Requireable<boolean>;
    reloadEntity: PropTypes.Requireable<boolean>;
    service: PropTypes.Requireable<object>;
    saveProps: PropTypes.Requireable<object>;
    useSaveChanges: PropTypes.Requireable<boolean>;
    expandProperties: PropTypes.Requireable<string>;
}>, "maxWidth" | "fullWidth">> & Partial<Pick<{
    maxWidth: string;
    fullWidth: boolean;
}, never>>, "open" | "footer" | "header" | "title" | "maxWidth" | "children" | "onSubmit" | "fullWidth" | "onClose" | "actions" | "mode" | "buttons" | "nameSingularText" | "namePluralText" | "keyField" | "namePlural" | "nameSingular" | "displayField" | "flags" | "defaultEntity" | "fullScreen" | "onValidate" | "entity" | "expandProperties" | "reloadEntity" | "service" | "originalEntity" | "saveProps" | "useSaveChanges"> & import("@material-ui/core").StyledComponentProps<"errorContainer" | "appBar" | "fullScreenTitle" | "progressWrapper" | "dialogContent">>;
export default _default;
import React from "react";
import PropTypes from "prop-types";
